#!/usr/bin/perl -I lib/

use strict;
use warnings;

use Getopt::Long::Descriptive qw(describe_options);
use Module::Pluggable search_path => ['DnsSync::Provider'], sub_name => 'providers', require => 1;

use DnsSync::Utils qw(verbose set_verbosity);

use Data::Dumper;

my ($cli) = describe_options(
	'dns-sync %o',
	[ 'verbose|v', 'Increases logging verbosity', ],
	[ 'wait', 'Prevent exit until changes have propogated to DNS servers', ],
	[ 'origin=s', 'Use specified DNS zone origin for write operations. This allows a record set to be transposed from one origin to another when source and target origins differ. Note that some providers force the origin to a particular value based on existing data. and will complain if this is set to a different value' ],
);
set_verbosity(1) if $cli->{verbose};

exit main();

sub main {
	my ($source, $target) = @ARGV;
	die "Must specify 2 positional arguments: source and target" unless $source && $target;

	# Find the provider for the source and dest
	my @providers = providers();
	my $sourceProvider;
	my $targetProvider;
	for my $p (@providers) {
		my $can_handle = $p->can('can_handle');
	  if($can_handle->($source)) {
			die "Source is ambigious, could be handled by both $sourceProvider and $p" if $sourceProvider;
			$sourceProvider = $p;
		}
		if($can_handle->($target)) {
			die "Target is ambigious, could be handled by both $targetProvider and $p" if $targetProvider;
			$targetProvider = $p;
		}
	}
	die "No provider found for source $source" unless $sourceProvider;
	die "No provider found for target $target" unless $targetProvider;

	# Perform sync
	my $sourceData = $sourceProvider->can('get_records')->($source);
	$targetProvider->can('write_records')->($target, $sourceData->{records}, {
		wait   => $cli->{wait},
		origin => $sourceData->{origin} || $cli->{origin},
	});

	return 0;
}
